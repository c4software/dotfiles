#!/bin/bash

# Set to true when going directly to a submenu, so we can exit directly
BACK_TO_EXIT=false

back_to() {
  local parent_menu="$1"

  if [[ "$BACK_TO_EXIT" == "true" ]]; then
    exit 0
  elif [[ -n "$parent_menu" ]]; then
    "$parent_menu"
  else
    show_main_menu
  fi
}

menu() {
  local prompt="$1"
  local options="$2"
  local extra="$3"
  local preselect="$4"

  read -r -a args <<<"$extra"

  if [[ -n "$preselect" ]]; then
    local index
    index=$(echo -e "$options" | grep -nxF "$preselect" | cut -d: -f1)
    if [[ -n "$index" ]]; then
      args+=("-a" "$index")
    fi
  fi

  echo -e "$options" | walker --dmenu --theme dmenu_250 -p "$prompt…" "${args[@]}"
}

terminal() {
  alacritty --class Omarchy -e "$@"
}

present_terminal() {
  alacritty --class Omarchy -e bash -c "eval \"$1\"; omarchy-show-done;"
}

edit_in_nvim() {
  notify-send "Editing config file" "$1"
  alacritty -e nvim "$1"
}

install() {
  present_terminal "echo 'Installing $1...'; yay -Sy --noconfirm $2"
}

install_and_launch() {
  present_terminal "echo 'Installing $1...'; yay -Sy --noconfirm $2 && setsid gtk-launch $3"
}

aur_install() {
  present_terminal "echo 'Installing $1 from AUR...'; yay -Sy --noconfirm $2"
}

aur_install_and_launch() {
  present_terminal "echo 'Installing $1 from AUR...'; yay -Sy --noconfirm $2 && setsid gtk-launch $3"
}

show_learn_menu() {
  case $(menu "Learn" "  Keybindings\n  Omarchy\n  Hyprland\n󰣇  Arch\n  Neovim\n󱆃  Bash") in
  *Keybindings*) omarchy-menu-keybindings ;;
  *Omarchy*) xdg-open "https://learn.omacom.io/2/the-omarchy-manual" ;;
  *Hyprland*) xdg-open "https://wiki.hypr.land/" ;;
  *Arch*) xdg-open "https://wiki.archlinux.org/title/Main_page" ;;
  *Bash*) xdg-open "https://devhints.io/bash" ;;
  *Neovim*) xdg-open "https://www.lazyvim.org/keymaps" ;;
  *) show_main_menu ;;
  esac
}

show_capture_menu() {
  case $(menu "Capture" "  Screenshot\n  Screenrecord\n󰃉  Color") in
  *Screenshot*) show_screenshot_menu ;;
  *Screenrecord*) show_screenrecord_menu ;;
  *Color*) pkill hyprpicker || hyprpicker -a ;;
  *) show_main_menu ;;
  esac
}

show_screenshot_menu() {
  case $(menu "Screenshot" "  Region\n  Window\n  Display") in
  *Region*) omarchy-cmd-screenshot ;;
  *Window*) omarchy-cmd-screenshot window ;;
  *Display*) omarchy-cmd-screenshot output ;;
  *) show_capture_menu ;;
  esac
}

show_screenrecord_menu() {
  case $(menu "Screenrecord" "  Region\n  Display") in
  *Region*) omarchy-cmd-screenrecord ;;
  *Display*) omarchy-cmd-screenrecord output ;;
  *) show_capture_menu ;;
  esac
}

show_toggle_menu() {
  case $(menu "Toggle" "󱫖  Idle Lock\n󰍜  Top Bar") in
  *Idle*) omarchy-toggle-idle ;;
  *Bar*) omarchy-toggle-waybar ;;
  *) show_main_menu ;;
  esac
}

show_setup_menu() {
  local options="  Audio\n  Wifi\n󰂯  Bluetooth\n󱐋  Power Profile\n󰍹  Resolution\n󰍹  Monitors"
  [ -f ~/.config/hypr/bindings.conf ] && options="$options\n  Keybindings"
  [ -f ~/.config/hypr/input.conf ] && options="$options\n  Input"
  options="$options\n  Config\n"

  case $(menu "Setup" "$options") in
  *Audio*) alacritty --class=Wiremix -e wiremix ;;
  *Wifi*)
    rfkill unblock wifi
    alacritty --class=Impala -e impala
    ;;
  *Bluetooth*)
    rfkill unblock bluetooth
    alacritty --class=Bluetui -e bluetui
    ;;
  *Power*) show_setup_power_menu ;;
  *Resolution*) omarchy-monitor-resolution-picker ;;
  *Monitors*) terminal "hyprmon" ;;
  *Keybindings*) edit_in_nvim ~/.config/hypr/bindings.conf ;;
  *Input*) edit_in_nvim ~/.config/hypr/input.conf ;;
  *Config*) show_setup_config_menu ;;
  *) show_main_menu ;;
  esac
}

show_setup_power_menu() {
  profile=$(menu "Power Profile" "$(omarchy-powerprofiles-list)" "" "$(powerprofilesctl get)")

  if [[ "$profile" == "CNCLD" || -z "$profile" ]]; then
      back_to show_main_menu
  else
    powerprofilesctl set "$profile"
  fi
}

show_setup_config_menu() {
  case $(menu "Setup" "  Hyprland\n  Hypridle\n  Hyprlock\n  Swayosd\n󰌧  Walker\n󰍜  Waybar") in
  *Hyprland*) edit_in_nvim ~/.config/hypr/hyprland.conf ;;
  *Hypridle*) edit_in_nvim ~/.config/hypr/hypridle.conf && omarchy-restart-hypridle ;;
  *Hyprlock*) edit_in_nvim ~/.config/hypr/hyprlock.conf ;;
  *Swayosd*) edit_in_nvim ~/.config/swayosd/config.toml && omarchy-restart-swayosd ;;
  *Walker*) edit_in_nvim ~/.config/walker/config.toml && omarchy-restart-walker ;;
  *Waybar*) edit_in_nvim ~/.config/waybar/config.jsonc && omarchy-restart-waybar ;;
  *) show_main_menu ;;
  esac
}

show_install_menu() {
  case $(menu "Install" "󰣇  Package\n󰣇  AUR\n  Web App\n  TUI\n  Service\n󰵮  Development\n  Editor\n󱚤  AI") in
  *Package*) terminal omarchy-pkg-install ;;
  *AUR*) terminal omarchy-pkg-aur-install ;;
  *Web*) present_terminal omarchy-webapp-install ;;
  *TUI*) present_terminal omarchy-tui-install ;;
  *Service*) show_install_service_menu ;;
  *Development*) show_install_development_menu ;;
  *Editor*) show_install_editor_menu ;;
  *AI*) show_install_ai_menu ;;
  *) show_main_menu ;;
  esac
}

show_install_service_menu() {
  case $(menu "Install" "󱨑  Firewall\n  Dropbox") in
  *Firewall*) present_terminal omarchy-install-firewall ;;
  *Dropbox*) present_terminal omarchy-install-dropbox ;;
  *) show_install_menu ;;
  esac
}

show_install_ai_menu() {
  case $(menu "Install" "󱚤  Claude Code\n󱚤  Gemini\n󱚤  LM Studio\n󱚤  Ollama\n󱚤  Crush\n󱚤  opencode") in
  *Claude*) install "Claude Code" "claude-code" ;;
  *Gemini*) install "Gemini" "gemini-cli-bin" ;;
  *Studio*) install "LM Studio" "lmstudio" ;;
  *Ollama*) install "Ollama" "ollama" ;;
  *Crush*) install "Crush" "crush-bin" ;;
  *opencode*) install "opencode" "opencode-bin" ;;
  *) show_install_menu ;;
  esac
}

show_install_development_menu() {
  case $(menu "Install" "󰫏  Ruby on Rails\n  Docker DB\n  JavaScript\n  Go\n  PHP\n  Python\n  Elixir\n  Zig\n  Rust\n  Java\n  .NET\n  OCaml") in
  *Rails*) present_terminal "omarchy-install-dev-env ruby" ;;
  *Docker*) present_terminal omarchy-install-docker-dbs ;;
  *JavaScript*) show_install_javascript_menu ;;
  *Go*) present_terminal "omarchy-install-dev-env go" ;;
  *PHP*) present_terminal "omarchy-install-dev-env php" ;;
  *Python*) present_terminal "omarchy-install-dev-env python" ;;
  *Zig*) present_terminal "omarchy-install-dev-env zig" ;;
  *Rust*) present_terminal "omarchy-install-dev-env rust" ;;
  *Java*) present_terminal "omarchy-install-dev-env java" ;;
  *NET*) present_terminal "omarchy-install-dev-env dotnet" ;;
  *OCaml*) present_terminal "omarchy-install-dev-env ocaml" ;;
  *) show_install_menu ;;
  esac
}

show_install_editor_menu() {
  case $(menu "Install" "  VSCode\n  Cursor [AUR]\n  Zed\n  Sublime Text\n  Helix\n  JetBrains [AUR]") in
  *VSCode*) install_and_launch "VSCode" "visual-studio-code-bin" "code" ;;
  *Cursor*) aur_install_and_launch "Cursor" "cursor-bin" "cursor" ;;
  *Zed*) install_and_launch "Zed" "zed" "dev.zed.Zed" ;;
  *Sublime*) install_and_launch "Sublime Text" "sublime-text-4" "sublime_text" ;;
  *Helix*) install "Helix" "helix" ;;
  *JetBrains*) aur_install_and_launch "Jetbrains Toolbox" "jetbrains-toolbox" "jetbrains-toolbox" ;;
  *) show_install_menu ;;
  esac
}

show_install_javascript_menu() {
  case $(menu "Install" "  Node.js\n  Bun\n  Deno") in
  *Node*) present_terminal "omarchy-install-dev-env node" ;;
  *Bun*) present_terminal "omarchy-install-dev-env bun" ;;
  *Deno*) present_terminal "omarchy-install-dev-env deno" ;;
  *) show_install_development_menu ;;
  esac
}
show_remove_menu() {
  case $(menu "Remove" "  Web App\n  TUI") in
  *Web*) present_terminal omarchy-webapp-remove ;;
  *TUI*) present_terminal omarchy-tui-remove ;;
  *) show_main_menu ;;
  esac
}

show_system_menu() {
  case $(menu "System" "  Lock\n󱄄  Screensaver\n󰤄  Suspend\n  Relaunch\n󰜉  Restart\n󰐥  Shutdown") in
  *Lock*) omarchy-lock-screen ;;
  *Screensaver*) omarchy-launch-screensaver force ;;
  *Suspend*) systemctl suspend ;;
  *Relaunch*) uwsm stop ;;
  *Restart*) systemctl reboot ;;
  *Shutdown*) systemctl poweroff ;;
  *) back_to show_main_menu ;;
  esac
}

show_theme_menu() {
  theme=$(menu "Theme" "$(omarchy-theme-list)" "" "$(omarchy-theme-current)")
  if [[ "$theme" == "CNCLD" || -z "$theme" ]]; then
    show_main_menu
  else
    omarchy-theme-set "$theme"
  fi
}

show_main_menu() {
  go_to_menu "$(menu "Go" "󰀻  Apps\n󰧑  Learn\n  Capture\n󰔎  Toggle\n󰸌  Themes\n  Setup\n󰉉  Install\n󰭌  Remove\n  About\n  System")"
}

go_to_menu() {
  case "${1,,}" in
  *apps*) walker -p "Launch…" ;;
  *learn*) show_learn_menu ;;
  *capture*) show_capture_menu ;;
  *screenshot*) show_screenshot_menu ;;
  *screenrecord*) show_screenrecord_menu ;;
  *toggle*) show_toggle_menu ;;
  *themes*) show_theme_menu ;;
  *setup*) show_setup_menu ;;
  *install*) show_install_menu ;;
  *remove*) show_remove_menu ;;
  *system*) show_system_menu ;;
  *about*) terminal bash -c 'fastfetch; read -n 1 -s' ;;
  *power*) show_setup_power_menu ;;
  esac
}

if [[ -n "$1" ]]; then
  BACK_TO_EXIT=true
  go_to_menu "$1"
else
  show_main_menu
fi
