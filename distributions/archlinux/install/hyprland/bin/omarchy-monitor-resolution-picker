#!/bin/bash

set -euo pipefail

menu() {
  local prompt="$1"
  local options="$2"
  local extra="$3"
  local preselect="$4"

  read -r -a args <<<"$extra"

  if [[ -n "$preselect" ]]; then
    local index
    index=$(echo -e "$options" | grep -nxF "$preselect" | cut -d: -f1)
    if [[ -n "$index" ]]; then
      args+=("-a" "$index")
    fi
  fi

  echo -e "$options" | walker --dmenu --theme dmenu_250 -p "$prompt…" "${args[@]}"
}

present_terminal() {
  alacritty --class Omarchy -e bash -c "$1"
}

# Function to persist the new configuration in Hyprland config file
# Arguments:
#   $1: monitor name
#   $2: new configuration values (mode,position,scale)
persist_configuration(){
  local new_configuration_name="$1" # monitor name
  local new_configuration_values="$2" # mode,position,scale

  # Get all monitors configuration from hyprctl ignoring the new one
  local monitors_json
  monitors_json=$(hyprctl monitors all -j | jq --arg NAME "$new_configuration_name" 'map(select(.name != $NAME))')

  # Generate the new monitors configuration, for each ("monitor=$monitor_name,$chosen_mode,$position,$chosen_scale")
  local new_monitors_config
  new_monitors_config=$(echo "$monitors_json" | jq --arg VALUE "$new_configuration_value" 'map("monitor=\(.name),\(.mode),\(.position),\(.scale),$VALUE") | .[]')

  echo $new_monitors_config
}

main() {
  monitors_json=$(hyprctl monitors all -j)

  if [[ -z "$monitors_json" || "$monitors_json" == "[]" ]]; then
    echo "No monitors detected by Hyprland." >&2
    exit 1
  fi

  monitor_count=$(echo "$monitors_json" | jq 'length')

  if (( monitor_count == 1 )); then
    # Only one monitor, no prompt
    monitor_name=$(echo "$monitors_json" | jq -r '.[0].name')
    monitor_details=$(echo "$monitors_json" | jq '.[0]')
  else
    # Multiple monitors → prompt
    monitor_list=$(echo "$monitors_json" | jq -r '.[] |
      .name + "\t" +
      (.width|tostring) + "x" + (.height|tostring) + "@" + ((.refreshRate|floor)|tostring) + ".00Hz" +
      (if .focused then " (current)" else "" end)')

    focused_monitor=$(echo "$monitors_json" | jq -r '.[] | select(.focused) | .name')

    selected_monitor_line=$(menu "Monitor" "$monitor_list" "" "$focused_monitor")
    if [[ -z "$selected_monitor_line" ]]; then
      echo "No selection. Operation cancelled."
      exit 0
    fi

    monitor_name=$(echo "$selected_monitor_line" | cut -f1)
    monitor_details=$(echo "$monitors_json" | jq --arg MON "$monitor_name" '.[] | select(.name == $MON)')
  fi

  # Step 3: resolution (with disable option if multiple monitors)
  available_modes=$(echo "$monitor_details" | jq -r '.availableModes[]')
  current_mode=$(echo "$monitor_details" | jq -r '"\(.width)x\(.height)@\(.refreshRate | floor).00Hz"')

  if (( monitor_count > 1 )); then
    available_modes="Disable monitor\n$available_modes"
  fi

  chosen_mode_raw=$(menu "Resolution" "$available_modes" "" "$current_mode")
  if [[ -z "$chosen_mode_raw" ]]; then
    echo "No selection. Operation cancelled."
    exit 0
  fi

  if [[ "$chosen_mode_raw" != "Disable monitor" ]]; then
    # Step 4: scale (only if not disabled)
    chosen_mode=$(echo "$chosen_mode_raw" | sed -E 's/@([0-9]+)\.[0-9]+Hz/@\1Hz/' | cut -d' ' -f1)
    scale_options="1.00\n1.25\n1.50\n1.75\n2.00"
    current_scale=$(echo "$monitor_details" | jq -r '.scale')

    chosen_scale=$(menu "Which scale to apply" "$scale_options" "" "$current_scale")
    if [[ -z "$chosen_scale" ]]; then
      echo "No selection. Operation cancelled."
      exit 0
    fi
  fi

  if [[ "$chosen_mode_raw" == "Disable monitor" ]]; then
    chosen_mode="disabled"
    chosen_scale="1.00"
  fi

  # Step 5: terminal script
  position=$(echo "$monitor_details" | jq -r '"\(.x)x\(.y)"')
  cmd="hyprctl keyword monitor \"$monitor_name,${chosen_mode},$position,$chosen_scale\""

  persist_configuration "$monitor_name" "$chosen_mode,$position,$chosen_scale"
}

main
