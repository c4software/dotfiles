#!/bin/bash

set -euo pipefail

# Profile storage directory
PROFILES_DIR="$HOME/.config/hypr/monitor-profiles"
mkdir -p "$PROFILES_DIR"

menu() {
  local prompt="$1"
  local options="$2"
  local extra="$3"
  local preselect="$4"

  read -r -a args <<<"$extra"

  if [[ -n "$preselect" ]]; then
    local index
    index=$(echo -e "$options" | grep -nxF "$preselect" | cut -d: -f1)
    if [[ -n "$index" ]]; then
      args+=("-a" "$index")
    fi
  fi

  echo -e "$options" | walker --dmenu --theme dmenu_250 -p "$promptâ€¦" "${args[@]}"
}

# Function to persist the new configuration in Hyprland config file
# Arguments: (if not provided, just persist current configuration)
#   $1: monitor name (optionnal)
#   $2: new configuration values (mode,position,scale) (optionnal)
persist_configuration(){
  local new_configuration_name="${1:-}"   # (optionnel) monitor name
  local new_configuration_values="${2:-}" # (optionnel) mode,position,scale

  # Get all monitors configuration from hyprctl ignoring the new one
  local monitors_json

  if [[ -z "$new_configuration_name" || -z "$new_configuration_values" ]]; then
    # No new monitor specified, just take all current monitors as is
    monitors_json=$(hyprctl monitors all -j)
  else
    # Exclude the new monitor from the list to avoid duplicates
    monitors_json=$(hyprctl monitors all -j | jq --arg NAME "$new_configuration_name" 'map(select(.name != $NAME))')
  fi

  # For each monitor, extract its current configuration to construct the new config line (format monitor=$monitor_name,$chosen_mode,$position,$chosen_scale)
  local new_monitors_config=""
  local monitor
  for (( i=0; i<$(echo "$monitors_json" | jq 'length'); i++ )); do
    monitor=$(echo "$monitors_json" | jq -r ".[$i]")
    local name
    name=$(echo "$monitor" | jq -r '.name')
    local mode
    mode=$(echo "$monitor" | jq -r '"\(.width)x\(.height)@\(.refreshRate | floor).00Hz"')
    local position
    position=$(echo "$monitor" | jq -r '"\(.x)x\(.y)"')
    local scale
    scale=$(echo "$monitor" | jq -r '.scale')
    local disabled
    disabled=$(echo "$monitor" | jq -r '.disabled')

    # Format monitor=$monitor_name,$chosen_mode,$position,$chosen_scale
    local config_line
    if [[ "$disabled" == "true" ]]; then
      config_line="monitor=$name,disable"
    else
      config_line="monitor=$name,$mode,$position,$scale"
    fi

    new_monitors_config+=$'\n'"$config_line"
  done

  # If a new monitor configuration is provided, append it
  if [[ -n "$new_configuration_name" && -n "$new_configuration_values" ]]; then
    # Append the new monitor configuration at the end
    new_monitors_config+=$'\n'"monitor=$new_configuration_name,$new_configuration_values"
  fi

  # Update the Hyprland config file (~/.config/hypr/monitors.conf)
  # In this file, at the end or in the block #autogenerated-monitors ... #end-autogenerated-monitors
  local hyprland_config_file="$HOME/.config/hypr/monitors.conf"
  local content
  content=$(< "$hyprland_config_file")

  # Remove existing autogenerated block if present
  content=$(echo "$content" | sed '/#autogenerated-monitors/,/#end-autogenerated-monitors/d')

  # Append new configuration
  content+=$'\n'"#autogenerated-monitors"$'\n'"$new_monitors_config"$'\n'"#end-autogenerated-monitors"

  # Write back to file once
  echo "$content" > "$hyprland_config_file"

  notify-send "Configuration updated" "The new monitor configuration has been saved to $hyprland_config_file" -t 5000
}

save_profile() {
  local profile_name="$1"
  local monitors_json
  monitors_json=$(hyprctl monitors all -j)

  local profile_config=""
  local monitor_count
  monitor_count=$(echo "$monitors_json" | jq 'length')

  for (( i=0; i<monitor_count; i++ )); do
    local mon name disabled mode position scale
    mon=$(echo "$monitors_json" | jq -r ".[$i]")
    name=$(echo "$mon" | jq -r '.name')
    disabled=$(echo "$mon" | jq -r '.disabled')

    if [[ "$disabled" == "true" ]]; then
      profile_config+=$'\n'"$name,disable"
    else
      mode=$(echo "$mon" | jq -r '"\(.width)x\(.height)@\(.refreshRate | floor).00Hz"')
      position=$(echo "$mon" | jq -r '"\(.x)x\(.y)"')
      scale=$(echo "$mon" | jq -r '.scale')
      profile_config+=$'\n'"$name,$mode,$position,$scale"
    fi
  done

  echo "$profile_config" > "$PROFILES_DIR/$profile_name.conf"

  # Ask the user if we want to make this as default configuration (persist in monitors.conf)
  action=$(menu "Permanent configuration?" "Yes\nNo" "" "")
  if [[ "$action" == "Yes" ]]; then
    persist_configuration
  fi

  notify-send "Profile saved" "Profile '$profile_name' saved."
}

load_profile() {
  local profile_name="$1"
  local config_file="$PROFILES_DIR/$profile_name.conf"

  if [[ ! -f "$config_file" ]]; then
    notify-send "Error" "Profile '$profile_name' not found."
    return 1
  fi

  while IFS= read -r line; do
    [[ -z "$line" || "$line" =~ ^# ]] && continue
    hyprctl keyword monitor "$line"
  done < "$config_file"

  # Ask the user if we want to make this as default configuration (persist in monitors.conf)
  action=$(menu "Permanent configuration?" "Yes\nNo" "" "")
  if [[ "$action" == "Yes" ]]; then
    persist_configuration
  fi

  notify-send "Profile loaded" "Profile '$profile_name' applied."
}

manage_profiles() {
  local action
  action=$(menu "Profiles" "Save\nLoad\nDelete" "" "")

  if [[ "$action" == "Save" ]]; then
    local profile_name
    profile_name=$(menu "Profile name" "" "--forceprint" "")
    [[ -z "$profile_name" ]] && return
    save_profile "$profile_name"

  elif [[ "$action" == "Load" ]]; then
    local profiles
    profiles=$(ls "$PROFILES_DIR"/*.conf 2>/dev/null | xargs -n1 basename | sed 's/\.conf$//' || true)
    [[ -z "$profiles" ]] && { notify-send "Profiles" "No existing profiles."; return; }

    local p
    p=$(menu "Choose profile" "$profiles" "" "")
    [[ -n "$p" ]] && load_profile "$p"

  elif [[ "$action" == "Delete" ]]; then
    local profiles
    profiles=$(ls "$PROFILES_DIR"/*.conf 2>/dev/null | xargs -n1 basename | sed 's/\.conf$//' || true)
    [[ -z "$profiles" ]] && { notify-send "Profiles" "No existing profiles."; return; }

    local p
    p=$(menu "Delete profile" "$profiles" "" "")
    [[ -n "$p" ]] && rm -f "$PROFILES_DIR/$p.conf" && notify-send "Profile deleted" "'$p' deleted."
  fi
}

main() {
  # First menu: choose between profiles or configure a screen
  first_action=$(menu "What do you want to do?" "Configure a screen\nProfiles" "" "")

  if [[ "$first_action" == "Profiles" ]]; then
    manage_profiles
    exit 0
  fi

  # --- Normal flow: screen configuration ---
  monitors_json=$(hyprctl monitors all -j)

  if [[ -z "$monitors_json" || "$monitors_json" == "[]" ]]; then
    echo "No screens detected by Hyprland." >&2
    exit 1
  fi

  monitor_count=$(echo "$monitors_json" | jq 'length')

  if (( monitor_count == 1 )); then
    monitor_name=$(echo "$monitors_json" | jq -r '.[0].name')
    monitor_details=$(echo "$monitors_json" | jq '.[0]')
  else
    monitor_list=$(echo "$monitors_json" | jq -r '.[] |
      .name + "\t" +
      (.width|tostring) + "x" + (.height|tostring) + "@" + ((.refreshRate|floor)|tostring) + ".00Hz" +
      (if .focused then " (current)" else "" end)')

    focused_monitor=$(echo "$monitors_json" | jq -r '.[] | select(.focused) | .name')

    selected_monitor_line=$(menu "Screen" "$monitor_list" "" "$focused_monitor")
    [[ -z "$selected_monitor_line" ]] && exit 0

    monitor_name=$(echo "$selected_monitor_line" | cut -f1)
    monitor_details=$(echo "$monitors_json" | jq --arg MON "$monitor_name" '.[] | select(.name == $MON)')
  fi

  available_modes=$(echo "$monitor_details" | jq -r '.availableModes[]')
  current_mode=$(echo "$monitor_details" | jq -r '"\(.width)x\(.height)@\(.refreshRate | floor).00Hz"')

  is_disabled=$(echo "$monitor_details" | jq -r '.disabled')
  [[ "$is_disabled" == "true" ]] && current_mode="Disable monitor"

  available_modes="preferred\n$available_modes"

  if (( monitor_count > 1 )); then
    available_modes="$available_modes\nDisable monitor"
  fi

  chosen_mode_raw=$(menu "Resolution" "$available_modes" "" "$current_mode")
  [[ -z "$chosen_mode_raw" ]] && exit 0

  if [[ "$chosen_mode_raw" != "Disable monitor" ]]; then
    chosen_mode=$(echo "$chosen_mode_raw" | sed -E 's/@([0-9]+)\.[0-9]+Hz/@\1Hz/' | cut -d' ' -f1)
    scale_options="auto\n1.00\n1.25\n1.50\n1.666667\n2.00"
    current_scale=$(echo "$monitor_details" | jq -r '.scale')

    chosen_scale=$(menu "Scale" "$scale_options" "" "$current_scale")
    [[ -z "$chosen_scale" ]] && exit 0
  fi

  action=$(menu "Action" "Apply once\nSave configuration" "" "")
  [[ -z "$action" ]] && exit 0

  if [[ "$action" == "Apply once" ]]; then
    if [[ "$chosen_mode_raw" == "Disable monitor" ]]; then
      hyprctl keyword monitor "$monitor_name,disable"
    else
      position=$(echo "$monitor_details" | jq -r '"\(.x)x\(.y)"')
      hyprctl keyword monitor "$monitor_name,${chosen_mode},$position,$chosen_scale"
    fi
  else
    if [[ "$chosen_mode_raw" == "Disable monitor" ]]; then
      # monitor = name, disable
      persist_configuration "$monitor_name" "disable"
    else
      # Step 5: terminal script
      position=$(echo "$monitor_details" | jq -r '"\(.x)x\(.y)"')
      persist_configuration "$monitor_name" "$chosen_mode,$position,$chosen_scale"
    fi
  fi
}

main
