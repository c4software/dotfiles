#!/bin/bash

set -euo pipefail

CONFIG_FILE="$HOME/.config/hypr/monitors.conf"

menu() {
  local prompt="$1"
  local options="$2"
  local extra="$3"
  local preselect="$4"

  read -r -a args <<<"$extra"

  if [[ -n "$preselect" ]]; then
    local index
    index=$(echo -e "$options" | grep -nxF "$preselect" | cut -d: -f1)
    if [[ -n "$index" ]]; then
      args+=("-a" "$index")
    fi
  fi

  echo -e "$options" | walker --dmenu --theme dmenu_250 -p "$promptâ€¦" "${args[@]}"
}

present_terminal() {
  alacritty --class Omarchy -e bash -c "$1"
}''

save_config_autogenerated() {
  local -n updated_configs=$1

  mkdir -p "$(dirname "$CONFIG_FILE")"

  if [[ -f "$CONFIG_FILE" ]]; then
    existing_configs=$(sed '/#autogenerated_start/,/#autogenerated_end/d' "$CONFIG_FILE")
  else
    existing_configs=""
  fi

  {
    echo "$existing_configs"
    echo "#autogenerated_start"
    for line in "${updated_configs[@]}"; do
      echo "$line"
    done
    echo "#autogenerated_end"
  } >"$CONFIG_FILE"
}

main() {
  monitors_json=$(hyprctl monitors -j)

  if [[ -z "$monitors_json" || "$monitors_json" == "[]" ]]; then
    echo "No monitors detected by Hyprland." >&2
    exit 1
  fi

  monitor_count=$(echo "$monitors_json" | jq 'length')

  # Build a map of current configs
  declare -A current_configs
  for ((i=0;i<monitor_count;i++)); do
    monitor=$(echo "$monitors_json" | jq ".[$i]")
    name=$(echo "$monitor" | jq -r ".name")
    width=$(echo "$monitor" | jq -r ".width")
    height=$(echo "$monitor" | jq -r ".height")
    refresh=$(echo "$monitor" | jq -r ".refreshRate | floor")
    scale=$(echo "$monitor" | jq -r ".scale")
    x=$(echo "$monitor" | jq -r ".x")
    y=$(echo "$monitor" | jq -r ".y")

    current_configs["$name"]="monitor=$name,${width}x${height}@${refresh}Hz,${x}x${y},$scale"
  done

  # User chooses which monitor to update
  monitor_list=$(echo "$monitors_json" | jq -r '.[] |
      .name + "\t" +
      (.width|tostring) + "x" + (.height|tostring) + "@" + ((.refreshRate|floor)|tostring) + "Hz" +
      (if .focused then " (current)" else "" end)')

  focused_monitor=$(echo "$monitors_json" | jq -r '.[] | select(.focused) | .name')
  selected_monitor_line=$(menu "Which monitor to configure" "$monitor_list" "" "$focused_monitor")
  if [[ -z "$selected_monitor_line" ]]; then
    echo "No selection. Operation cancelled."
    exit 0
  fi

  monitor_name=$(echo "$selected_monitor_line" | cut -f1)
  monitor_details=$(echo "$monitors_json" | jq --arg MON "$monitor_name" '.[] | select(.name == $MON)')

  # Step 1: resolution options
  available_modes=$(echo "$monitor_details" | jq -r '.availableModes[]')
  options="Automatic (preferred,auto)\n"
  if (( monitor_count > 1 )); then
    options+="Disable monitor\n"
  fi
  options+="$available_modes"

  current_mode=$(echo "$monitor_details" | jq -r '"\(.width)x\(.height)@\(.refreshRate | floor).00Hz"')
  chosen_mode_raw=$(menu "Which resolution" "$options" "" "$current_mode")
  if [[ -z "$chosen_mode_raw" ]]; then
    echo "No selection. Operation cancelled."
    exit 0
  fi

  position=$(echo "$monitor_details" | jq -r '"\(.x)x\(.y)"')

  if [[ "$chosen_mode_raw" == "Disable monitor" ]]; then
    config_line="monitor=$monitor_name,disable"
    cmd="hyprctl keyword monitor \"$monitor_name,disable\""
  else
    if [[ "$chosen_mode_raw" == "Automatic (preferred,auto)" ]]; then
      chosen_mode="preferred,auto,auto"
    else
      chosen_mode=$(echo "$chosen_mode_raw" | sed -E 's/@([0-9]+)\.[0-9]+Hz/@\1Hz/' | cut -d' ' -f1)
    fi

    # Always ask scale
    scale_options="1.00\n1.25\n1.50\n1.75\n2.00"
    current_scale=$(echo "$monitor_details" | jq -r '.scale')
    chosen_scale=$(menu "Which scale for $monitor_name" "$scale_options" "" "$current_scale")
    if [[ -z "$chosen_scale" ]]; then
      echo "No scale selected. Operation cancelled."
      exit 0
    fi

    if [[ "$chosen_mode_raw" == "Automatic (preferred,auto)" ]]; then
      config_line="monitor=$monitor_name,$chosen_mode,$chosen_scale"
      cmd="hyprctl keyword monitor \"$monitor_name,$chosen_mode,$chosen_scale\""
    else
      config_line="monitor=$monitor_name,${chosen_mode},$position,$chosen_scale"
      cmd="hyprctl keyword monitor \"$monitor_name,${chosen_mode},$position,$chosen_scale\""
    fi
  fi

  # Apply update
  terminal_script=$(cat <<EOF
echo "Applying configuration for $monitor_name:"
echo "  $config_line"
$cmd
echo "âœ… Applied successfully!"
EOF
)
  present_terminal "$terminal_script"

  # Update the config map
  current_configs["$monitor_name"]="$config_line"

  # Save all monitors preserving the others
  updated_configs=()
  for m in "${!current_configs[@]}"; do
    updated_configs+=("${current_configs[$m]}")
  done

  save_config_autogenerated updated_configs
  echo "ðŸ’¾ Configuration saved to $CONFIG_FILE"

  echo
  omarchy-show-done
}

main
