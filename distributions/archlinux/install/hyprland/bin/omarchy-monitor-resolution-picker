#!/bin/bash

set -euo pipefail

menu() {
  local prompt="$1"
  local options="$2"
  local extra="$3"
  local preselect="$4"

  read -r -a args <<<"$extra"

  if [[ -n "$preselect" ]]; then
    local index
    index=$(echo -e "$options" | grep -nxF "$preselect" | cut -d: -f1)
    if [[ -n "$index" ]]; then
      args+=("-a" "$index")
    fi
  fi

  echo -e "$options" | walker --dmenu --theme dmenu_250 -p "$prompt…" "${args[@]}"
}

present_terminal() {
  alacritty --class Omarchy -e bash -c "$1"
}

# Function to persist the new configuration in Hyprland config file
# Arguments:
#   $1: monitor name
#   $2: new configuration values (mode,position,scale)
persist_configuration(){
  local new_configuration_name="$1" # monitor name
  local new_configuration_values="$2" # mode,position,scale

  # Get all monitors configuration from hyprctl ignoring the new one
  local monitors_json
  monitors_json=$(hyprctl monitors all -j | jq --arg NAME "$new_configuration_name" 'map(select(.name != $NAME))')

  # For each monitor, extract its current configuration to construct the new config line (format monitor=$monitor_name,$chosen_mode,$position,$chosen_scale)
  local new_monitors_config=""
  local monitor
  for (( i=0; i<$(echo "$monitors_json" | jq 'length'); i++ )); do
    monitor=$(echo "$monitors_json" | jq -r ".[$i]")
    local name
    name=$(echo "$monitor" | jq -r '.name')
    local mode
    mode=$(echo "$monitor" | jq -r '"\(.width)x\(.height)@\(.refreshRate | floor).00Hz"')
    local position
    position=$(echo "$monitor" | jq -r '"\(.x)x\(.y)"')
    local scale
    scale=$(echo "$monitor" | jq -r '.scale')
    local disabled
    disabled=$(echo "$monitor" | jq -r '.disabled')

    # Format monitor=$monitor_name,$chosen_mode,$position,$chosen_scale
    local config_line
    if [[ "$disabled" == "true" ]]; then
      config_line="monitor=$name,disable"
    else
      config_line="monitor=$name,$mode,$position,$scale"
    fi

    new_monitors_config+=$'\n'"$config_line"
  done

  # Append the new monitor configuration at the end
  new_monitors_config+=$'\n'"monitor=$new_configuration_name,$new_configuration_values"

  # Update the Hyprland config file (~/.config/hypr/monitors.conf)
  # In this file, at the end or in the block #autogenerated-monitors ... #end-autogenerated-monitors
  local hyprland_config_file="$HOME/.config/hypr/monitors.conf"
  local content
  content=$(< "$hyprland_config_file")

  # Remove existing autogenerated block if present
  content=$(echo "$content" | sed '/#autogenerated-monitors/,/#end-autogenerated-monitors/d')

  # Append new configuration
  content+=$'\n'"#autogenerated-monitors"$'\n'"$new_monitors_config"$'\n'"#end-autogenerated-monitors"

  # Write back to file once
  echo "$content" > "$hyprland_config_file"

  notify-send "Configuration updated" "The new monitor configuration has been saved to $hyprland_config_file" -t 5000
}

main() {
  monitors_json=$(hyprctl monitors all -j)

  if [[ -z "$monitors_json" || "$monitors_json" == "[]" ]]; then
    echo "No monitors detected by Hyprland." >&2
    exit 1
  fi

  monitor_count=$(echo "$monitors_json" | jq 'length')

  if (( monitor_count == 1 )); then
    # Only one monitor, no prompt
    monitor_name=$(echo "$monitors_json" | jq -r '.[0].name')
    monitor_details=$(echo "$monitors_json" | jq '.[0]')
  else
    # Multiple monitors → prompt
    monitor_list=$(echo "$monitors_json" | jq -r '.[] |
      .name + "\t" +
      (.width|tostring) + "x" + (.height|tostring) + "@" + ((.refreshRate|floor)|tostring) + ".00Hz" +
      (if .focused then " (current)" else "" end)')

    focused_monitor=$(echo "$monitors_json" | jq -r '.[] | select(.focused) | .name')

    selected_monitor_line=$(menu "Monitor" "$monitor_list" "" "$focused_monitor")
    if [[ -z "$selected_monitor_line" ]]; then
      echo "No selection. Operation cancelled."
      exit 0
    fi

    monitor_name=$(echo "$selected_monitor_line" | cut -f1)
    monitor_details=$(echo "$monitors_json" | jq --arg MON "$monitor_name" '.[] | select(.name == $MON)')
  fi

  # Step 3: resolution (with disable option if multiple monitors)
  available_modes=$(echo "$monitor_details" | jq -r '.availableModes[]')
  current_mode=$(echo "$monitor_details" | jq -r '"\(.width)x\(.height)@\(.refreshRate | floor).00Hz"')

  # Get if the target monitor is currently disabled
  is_disabled=$(echo "$monitor_details" | jq -r '.disabled')
  if [[ "$is_disabled" == "true" ]]; then
    current_mode="Disable monitor"
  fi

  if (( monitor_count > 1 )); then
    available_modes="preferred\n$available_modes\nDisable monitor"
  fi

  chosen_mode_raw=$(menu "Resolution" "$available_modes" "" "$current_mode")
  if [[ -z "$chosen_mode_raw" ]]; then
    echo "No selection. Operation cancelled."
    exit 0
  fi

  if [[ "$chosen_mode_raw" != "Disable monitor" ]]; then
    # Step 4: scale (only if not disabled)
    chosen_mode=$(echo "$chosen_mode_raw" | sed -E 's/@([0-9]+)\.[0-9]+Hz/@\1Hz/' | cut -d' ' -f1)
    scale_options="auto\n1.00\n1.25\n1.50\n1.666667\n2.00"
    current_scale=$(echo "$monitor_details" | jq -r '.scale')

    chosen_scale=$(menu "Which scale" "$scale_options" "" "$current_scale")
    if [[ -z "$chosen_scale" ]]; then
      echo "No selection. Operation cancelled."
      exit 0
    fi
  fi

  # Ask the user if he want to save the configuration or just apply it once
  action=$(menu "Action" "Apply once\nSave configuration" "" "Save configuration")
  if [[ -z "$action" ]]; then
    echo "No selection. Operation cancelled."
    exit 0
  fi

  if [[ "$action" == "Apply once" ]]; then
    if [[ "$chosen_mode_raw" == "Disable monitor" ]]; then
      # monitor = name, disable
      hyprctl keyword monitor "$monitor_name,disable"
    else
      position=$(echo "$monitor_details" | jq -r '"\(.x)x\(.y)"')
      hyprctl keyword monitor "$monitor_name,${chosen_mode},$position,$chosen_scale"
    fi
  else
    if [[ "$chosen_mode_raw" == "Disable monitor" ]]; then
      # monitor = name, disable
      persist_configuration "$monitor_name" "disable"
    else
      # Step 5: terminal script
      position=$(echo "$monitor_details" | jq -r '"\(.x)x\(.y)"')
      persist_configuration "$monitor_name" "$chosen_mode,$position,$chosen_scale"
    fi
  fi
}

main
