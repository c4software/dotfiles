#!/bin/bash

set -euo pipefail

# Colors and styling
export GUM_CHOOSE_CURSOR_FOREGROUND="212"
export GUM_CHOOSE_SELECTED_FOREGROUND="212"
export GUM_CHOOSE_HEADER_FOREGROUND="99"

# Check dependencies
if ! command -v gum &> /dev/null; then
    echo "‚ùå gum is required but not installed. Please install it first."
    exit 1
fi

if ! command -v hyprctl &> /dev/null; then
    echo "‚ùå hyprctl is required but not installed. Are you running Hyprland?"
    exit 1
fi

# Step 1: Get monitors information
monitors_json=$(hyprctl monitors -j)
if [[ -z "$monitors_json" ]] || [[ "$monitors_json" == "[]" ]]; then
    gum style --foreground 196 --bold "‚ùå No monitors detected via hyprctl"
    exit 1
fi

# Prepare monitor list with current configuration
monitor_list=()
while IFS= read -r line; do
    monitor_list+=("$line")
done < <(echo "$monitors_json" | jq -r '.[] | "üñ•Ô∏è  \(.name) ‚îÇ \(.width)x\(.height)@\(.refreshRate) ‚îÇ Scale: \(.scale) ‚îÇ Pos: \(.x),\(.y)"')

# Display header
gum style \
    --foreground 212 --bold \
    --border double --border-foreground 99 \
    --align center --width 80 \
    "üñ•Ô∏è  HYPRLAND MONITOR CONFIGURATION" \
    "" \
    "Current monitors detected:"

# Show current monitors in a nice format
for monitor in "${monitor_list[@]}"; do
    gum style --foreground 147 "  $monitor"
done

echo ""

# Select monitor
selected_monitor=$(printf "%s\n" "${monitor_list[@]}" | gum choose \
    --header "üéØ Select a monitor to configure:" \
    --header.foreground 99 \
    --cursor.foreground 212 \
    --selected.foreground 212)

if [[ -z "$selected_monitor" ]]; then
    gum style --foreground 196 "‚ùå No monitor selected"
    exit 0
fi

# Extract monitor name
monitor_name=$(echo "$selected_monitor" | sed 's/üñ•Ô∏è  //' | cut -d' ' -f1)

# Get current configuration for selected monitor
current_info=$(echo "$monitors_json" | jq -r --arg MON "$monitor_name" '
    .[] | select(.name == $MON) | 
    {
        width: .width,
        height: .height,
        refreshRate: .refreshRate,
        scale: .scale,
        x: .x,
        y: .y,
        currentMode: "\(.width)x\(.height)@\(.refreshRate)",
        availableModes: .availableModes
    }
')

current_mode=$(echo "$current_info" | jq -r '.currentMode')
current_scale=$(echo "$current_info" | jq -r '.scale')
current_pos=$(echo "$current_info" | jq -r '"\(.x)x\(.y)"')

# Display current configuration
gum style \
    --foreground 99 --bold \
    --border rounded --border-foreground 147 \
    --padding "1 2" --margin "1 0" \
    "üìã Current Configuration for $monitor_name" \
    "" \
    "Resolution: $current_mode" \
    "Scale: $current_scale" \
    "Position: $current_pos"

# Get available modes
modes_raw=$(echo "$current_info" | jq -r '.availableModes[]')
modes_list=()

while IFS= read -r mode; do
    if [[ "$mode" == "$current_mode" ]]; then
        modes_list+=("‚ú® $mode (current)")
    else
        modes_list+=("   $mode")
    fi
done <<< "$modes_raw"

# Select resolution
chosen_mode_display=$(printf "%s\n" "${modes_list[@]}" | gum choose \
    --header "üîß Select resolution:" \
    --header.foreground 99 \
    --cursor.foreground 212 \
    --selected.foreground 212 \
    --height 15)

if [[ -z "$chosen_mode_display" ]]; then
    gum style --foreground 196 "‚ùå No resolution selected"
    exit 0
fi

# Clean the mode string
chosen_mode=$(echo "$chosen_mode_display" | sed 's/^‚ú® //' | sed 's/^   //' | sed 's/ (current)$//')

# Scale selection
scale_options=("1" "1.25" "1.5" "1.75" "2" "2.5" "3")
scale_list=()

for scale in "${scale_options[@]}"; do
    if [[ "$scale" == "$current_scale" ]]; then
        scale_list+=("‚ú® $scale (current)")
    else
        scale_list+=("   $scale")
    fi
done

chosen_scale_display=$(printf "%s\n" "${scale_list[@]}" | gum choose \
    --header "üìè Select scale:" \
    --header.foreground 99 \
    --cursor.foreground 212 \
    --selected.foreground 212)

if [[ -z "$chosen_scale_display" ]]; then
    gum style --foreground 196 "‚ùå No scale selected"
    exit 0
fi

# Clean the scale string
chosen_scale=$(echo "$chosen_scale_display" | sed 's/^‚ú® //' | sed 's/^   //' | sed 's/ (current)$//')

# Summary of changes
gum style \
    --foreground 212 --bold \
    --border thick --border-foreground 99 \
    --padding "1 2" --margin "1 0" \
    "üîÑ Configuration Summary" \
    "" \
    "Monitor: $monitor_name" \
    "Resolution: $chosen_mode" \
    "Scale: $chosen_scale" \
    "Position: $current_pos" \
    "" \
    "Ready to apply changes..."

# Confirmation
if gum confirm \
    --affirmative "‚úÖ Apply" \
    --negative "‚ùå Cancel" \
    --default=false \
    "Apply this configuration?"; then
    
    # Apply the configuration
    gum spin --spinner dot --title "Applying configuration..." -- \
        hyprctl keyword monitor "$monitor_name,$chosen_mode,$current_pos,$chosen_scale"
    
    # Success message
    gum style \
        --foreground 46 --bold \
        --border rounded --border-foreground 46 \
        --padding "1 2" --margin "1 0" \
        "‚úÖ Configuration Applied Successfully!" \
        "" \
        "Monitor: $monitor_name" \
        "Resolution: $chosen_mode" \
        "Scale: $chosen_scale"
else
    gum style \
        --foreground 208 \
        --border rounded --border-foreground 208 \
        --padding "1 2" --margin "1 0" \
        "‚ùå Configuration Cancelled" \
        "" \
        "No changes were made to your monitor setup."
fi