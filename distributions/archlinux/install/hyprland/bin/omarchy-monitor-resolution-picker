#!/bin/bash

set -euo pipefail

# Step 1: list monitors with their current resolution and scale
monitors=$(hyprctl monitors -j | jq -r '.[] | "\(.name)\t\(.width)x\(.height)@\(.refreshRate) (Scale: \(.scale))"')

if [[ -z "$monitors" ]]; then
  echo "No monitors detected via hyprctl"
  exit 1
fi

echo "üì∫ Current monitors configuration:"
echo "$monitors" | while IFS=$'\t' read -r name config; do
  echo "  ‚Ä¢ $name: $config"
done
echo ""

selected=$(echo "$monitors" | fzf --prompt="Select a monitor: " --with-nth=1,2 --delimiter=$'\t')
[[ -z "$selected" ]] && exit 0

monitor_name=$(echo "$selected" | cut -f1)
echo "Selected monitor: $monitor_name"

# Get current configuration for this monitor
current_config=$(hyprctl monitors -j | jq -r --arg MON "$monitor_name" '.[] | select(.name == $MON) | "\(.width)x\(.height)@\(.refreshRate) at \(.x)x\(.y) (Scale: \(.scale))"')
echo "üìã Current configuration: $current_config"
echo ""

# Step 2: list available resolutions for this monitor with current one highlighted
current_mode=$(hyprctl monitors -j | jq -r --arg MON "$monitor_name" '.[] | select(.name == $MON) | "\(.width)x\(.height)@\(.refreshRate)"')
modes=$(hyprctl monitors -j | jq -r --arg MON "$monitor_name" '.[] | select(.name == $MON) | .availableModes[]')

if [[ -z "$modes" ]]; then
  echo "No available modes found for $monitor_name"
  exit 1
fi

# Add marker for current mode
modes_with_current=$(echo "$modes" | while read -r mode; do
  if [[ "$mode" == "$current_mode" ]]; then
    echo "$mode ‚Üê CURRENT"
  else
    echo "$mode"
  fi
done)

echo "üîß Available resolutions (current marked with ‚Üê):"
echo "$modes_with_current" | sed 's/^/  ‚Ä¢ /'
echo ""

chosen_mode=$(echo "$modes_with_current" | fzf --prompt="Select a resolution: " | sed 's/ ‚Üê CURRENT//')
[[ -z "$chosen_mode" ]] && exit 0

# Step 3: ask user for scale among common values with current one highlighted
current_scale=$(hyprctl monitors -j | jq -r --arg MON "$monitor_name" '.[] | select(.name == $MON) | .scale')
scale_options=("1" "1.25" "1.5" "1.75" "2")

# Add marker for current scale
scale_options_with_current=()
for scale in "${scale_options[@]}"; do
  if [[ "$scale" == "$current_scale" ]]; then
    scale_options_with_current+=("$scale ‚Üê CURRENT")
  else
    scale_options_with_current+=("$scale")
  fi
done

echo "üìè Current scale: $current_scale"
chosen_scale=$(printf "%s\n" "${scale_options_with_current[@]}" | fzf --prompt="Select scale: " | sed 's/ ‚Üê CURRENT//')
[[ -z "$chosen_scale" ]] && exit 0

# Step 4: get current position for this monitor
position=$(hyprctl monitors -j | jq -r --arg MON "$monitor_name" '.[] | select(.name == $MON) | "\(.x)x\(.y)"')
echo "üìç Current position: $position"

# Step 5: show what will be applied
echo ""
echo "üîÑ Configuration to apply:"
echo "  Monitor: $monitor_name"
echo "  Resolution: $chosen_mode"
echo "  Position: $position"
echo "  Scale: $chosen_scale"
echo ""

# Ask for confirmation
if ! gum confirm "Apply this configuration?"; then
    echo "‚ùå Configuration cancelled."
    exit 0
fi

# Step 6: apply new configuration
cmd="hyprctl keyword monitor \"$monitor_name,$chosen_mode,$position,$chosen_scale\""
echo "Applying: $cmd"
eval $cmd

echo "‚úÖ Resolution applied with scale $chosen_scale."